//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/myScripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerOnGround"",
            ""id"": ""8e47ef60-5178-42d3-b5be-8c491dff3d3c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""32df0974-8375-471e-9ac6-7d3ab6f4608f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d87b2e74-535a-4317-a721-8a3a7c96d7ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b7b5507e-cc45-4070-9dff-a06a3a0aaf9d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""sprint"",
                    ""type"": ""Button"",
                    ""id"": ""50095976-1c0c-48a3-bf7f-ba431097a0df"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b878fc86-6bdd-47f7-994b-8474ea3d7b38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""reload"",
                    ""type"": ""Button"",
                    ""id"": ""241549ad-1766-46b8-bf53-e77328e09f1a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""af654f37-14ee-43e2-88c4-bf6751cbd266"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""979c55bc-08b8-44e4-a6e8-74a54b725371"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3d266f22-9751-4d9d-aaf8-ec9158aeabd7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""6fbf3307-1328-46de-b64a-fcfd8328305f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2e98b57e-8004-485a-9c9d-3a29c3739e3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""45daa6d0-5d47-43eb-bdfc-eb9c2281a5be"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""2281a669-1f89-4456-af95-ef3809d3b8ce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""74ee8c0d-4f44-4825-a17a-4d95a523d8da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c7def71-5d17-4cda-98a3-8ede039d900f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9a3ef8d-9c94-48e3-abad-0dee172edb8b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""196ed972-8c59-4080-ba73-e7406daa0799"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbc3b29d-9af4-41d2-9eb3-6b2c38285c4a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5383caed-627f-4f7e-a83c-00addb304512"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2dba856-1b4c-4bad-8ff6-2eebee4e4889"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62027054-20bf-4731-b522-7689acfe10ff"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1af53241-2d9a-46b4-bb65-6cd7058d9556"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOnGround
        m_PlayerOnGround = asset.FindActionMap("PlayerOnGround", throwIfNotFound: true);
        m_PlayerOnGround_Movement = m_PlayerOnGround.FindAction("Movement", throwIfNotFound: true);
        m_PlayerOnGround_Jump = m_PlayerOnGround.FindAction("Jump", throwIfNotFound: true);
        m_PlayerOnGround_Look = m_PlayerOnGround.FindAction("Look", throwIfNotFound: true);
        m_PlayerOnGround_sprint = m_PlayerOnGround.FindAction("sprint", throwIfNotFound: true);
        m_PlayerOnGround_shoot = m_PlayerOnGround.FindAction("shoot", throwIfNotFound: true);
        m_PlayerOnGround_reload = m_PlayerOnGround.FindAction("reload", throwIfNotFound: true);
        m_PlayerOnGround_SelectWeapon = m_PlayerOnGround.FindAction("SelectWeapon", throwIfNotFound: true);
        m_PlayerOnGround_TakeWeapon = m_PlayerOnGround.FindAction("TakeWeapon", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_PlayerOnGround.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerOnGround.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOnGround
    private readonly InputActionMap m_PlayerOnGround;
    private List<IPlayerOnGroundActions> m_PlayerOnGroundActionsCallbackInterfaces = new List<IPlayerOnGroundActions>();
    private readonly InputAction m_PlayerOnGround_Movement;
    private readonly InputAction m_PlayerOnGround_Jump;
    private readonly InputAction m_PlayerOnGround_Look;
    private readonly InputAction m_PlayerOnGround_sprint;
    private readonly InputAction m_PlayerOnGround_shoot;
    private readonly InputAction m_PlayerOnGround_reload;
    private readonly InputAction m_PlayerOnGround_SelectWeapon;
    private readonly InputAction m_PlayerOnGround_TakeWeapon;
    public struct PlayerOnGroundActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerOnGroundActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerOnGround_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerOnGround_Jump;
        public InputAction @Look => m_Wrapper.m_PlayerOnGround_Look;
        public InputAction @sprint => m_Wrapper.m_PlayerOnGround_sprint;
        public InputAction @shoot => m_Wrapper.m_PlayerOnGround_shoot;
        public InputAction @reload => m_Wrapper.m_PlayerOnGround_reload;
        public InputAction @SelectWeapon => m_Wrapper.m_PlayerOnGround_SelectWeapon;
        public InputAction @TakeWeapon => m_Wrapper.m_PlayerOnGround_TakeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOnGround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOnGroundActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerOnGroundActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerOnGroundActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerOnGroundActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @sprint.started += instance.OnSprint;
            @sprint.performed += instance.OnSprint;
            @sprint.canceled += instance.OnSprint;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @reload.started += instance.OnReload;
            @reload.performed += instance.OnReload;
            @reload.canceled += instance.OnReload;
            @SelectWeapon.started += instance.OnSelectWeapon;
            @SelectWeapon.performed += instance.OnSelectWeapon;
            @SelectWeapon.canceled += instance.OnSelectWeapon;
            @TakeWeapon.started += instance.OnTakeWeapon;
            @TakeWeapon.performed += instance.OnTakeWeapon;
            @TakeWeapon.canceled += instance.OnTakeWeapon;
        }

        private void UnregisterCallbacks(IPlayerOnGroundActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @sprint.started -= instance.OnSprint;
            @sprint.performed -= instance.OnSprint;
            @sprint.canceled -= instance.OnSprint;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @reload.started -= instance.OnReload;
            @reload.performed -= instance.OnReload;
            @reload.canceled -= instance.OnReload;
            @SelectWeapon.started -= instance.OnSelectWeapon;
            @SelectWeapon.performed -= instance.OnSelectWeapon;
            @SelectWeapon.canceled -= instance.OnSelectWeapon;
            @TakeWeapon.started -= instance.OnTakeWeapon;
            @TakeWeapon.performed -= instance.OnTakeWeapon;
            @TakeWeapon.canceled -= instance.OnTakeWeapon;
        }

        public void RemoveCallbacks(IPlayerOnGroundActions instance)
        {
            if (m_Wrapper.m_PlayerOnGroundActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerOnGroundActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerOnGroundActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerOnGroundActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerOnGroundActions @PlayerOnGround => new PlayerOnGroundActions(this);
    public interface IPlayerOnGroundActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnSelectWeapon(InputAction.CallbackContext context);
        void OnTakeWeapon(InputAction.CallbackContext context);
    }
}
